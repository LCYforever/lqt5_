/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Copyright (C) 2016 Intel Corporation.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or (at your option) the GNU General
** Public license version 3 or any later version approved by the KDE Free
** Qt Foundation. The licenses are as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-2.0.html and
** https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef QBYTEARRAY_H
#define QBYTEARRAY_H

#include <QtCore/qrefcount.lqt>
#include <QtCore/qnamespace.lqt>
#include <QtCore/qarraydata.lqt>

// #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
// Q_FORWARD_DECLARE_CF_TYPE(CFData);
// Q_FORWARD_DECLARE_OBJC_CLASS(NSData);
// #endif

QT_BEGIN_NAMESPACE


/*****************************************************************************
  Safe and portable C string functions; extensions to standard string.h
 *****************************************************************************/

// Q_CORE_EXPORT char *qstrdup(const char *);

// inline uint qstrlen(const char *str)
// { return str ? uint(strlen(str)) : 0; }

// inline uint qstrnlen(const char *str, uint maxlen)
// {
//     uint length = 0;
//     if (str) {
//         while (length < maxlen && *str++)
//             length++;
//     }
//     return length;
// }

// Q_CORE_EXPORT char *qstrcpy(char *dst, const char *src);
// Q_CORE_EXPORT char *qstrncpy(char *dst, const char *src, uint len);

// Q_CORE_EXPORT int qstrcmp(const char *str1, const char *str2);
// Q_CORE_EXPORT int qstrcmp(const QByteArray &str1, const QByteArray &str2);
// Q_CORE_EXPORT int qstrcmp(const QByteArray &str1, const char *str2);
// static inline int qstrcmp(const char *str1, const QByteArray &str2)
// { return -qstrcmp(str2, str1); }

// inline int qstrncmp(const char *str1, const char *str2, uint len)
// {
//     return (str1 && str2) ? strncmp(str1, str2, len)
//         : (str1 ? 1 : (str2 ? -1 : 0));
// }
// Q_CORE_EXPORT int qstricmp(const char *, const char *);
// Q_CORE_EXPORT int qstrnicmp(const char *, const char *, uint len);
// Q_CORE_EXPORT int qstrnicmp(const char *, qsizetype, const char *, qsizetype = -1);

// // implemented in qvsnprintf.cpp
// Q_CORE_EXPORT int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap);
// Q_CORE_EXPORT int qsnprintf(char *str, size_t n, const char *fmt, ...);

// // qChecksum: Internet checksum
// Q_CORE_EXPORT quint16 qChecksum(const char *s, uint len);                            // ### Qt 6: Remove
// Q_CORE_EXPORT quint16 qChecksum(const char *s, uint len, Qt::ChecksumType standard); // ### Qt 6: Use Qt::ChecksumType standard = Qt::ChecksumIso3309

class QByteRef;
class QString;
class QDataStream;
template <typename T> class QList;

typedef QArrayData QByteArrayData;

// template<int N> struct QStaticByteArrayData
// {
//     QByteArrayData ba;
//     char data[N + 1];

//     QByteArrayData *data_ptr() const
//     {
//         Q_ASSERT(ba.ref.isStatic());
//         return const_cast<QByteArrayData *>(&ba);
//     }
// };

// struct QByteArrayDataPtr
// {
//     QByteArrayData *ptr;
// };

// #define Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(size, offset) \
//     Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(size, offset)
//     /**/

// #define Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER(size) \
//     Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(size, sizeof(QByteArrayData)) \
//     /**/

// #  define QByteArrayLiteral(str) \
//     ([]() -> QByteArray { \
//         enum { Size = sizeof(str) - 1 }; \
//         static const QStaticByteArrayData<Size> qbytearray_literal = { \
//             Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER(Size), \
//             str }; \
//         QByteArrayDataPtr holder = { qbytearray_literal.data_ptr() }; \
//         const QByteArray ba(holder); \
//         return ba; \
//     }()) \
//     /**/

class Q_CORE_EXPORT QByteArray
{
private:
    typedef QTypedArrayData<char> Data;

public:
    enum Base64Option {
        Base64Encoding = 0,
        Base64UrlEncoding = 1,

        KeepTrailingEquals = 0,
        OmitTrailingEquals = 2
    };
    Q_DECLARE_FLAGS(Base64Options, Base64Option)

    inline QByteArray() Q_DECL_NOTHROW;
    QByteArray(const char *, int size = -1);
    QByteArray(int size, char c);
    QByteArray(int size, Qt::Initialization);
    inline QByteArray(const QByteArray &) Q_DECL_NOTHROW;
    inline ~QByteArray();

    QByteArray &operator=(const QByteArray &) Q_DECL_NOTHROW;
    QByteArray &operator=(const char *str);
// #ifdef Q_COMPILER_RVALUE_REFS
    inline QByteArray(QByteArray && other) Q_DECL_NOTHROW;
    inline QByteArray &operator=(QByteArray &&other) Q_DECL_NOTHROW;
// #endif

    inline void swap(QByteArray &other) Q_DECL_NOTHROW;

    inline int size() const;
    inline bool isEmpty() const;
    void resize(int size);

    QByteArray &fill(char c, int size = -1);

    inline int capacity() const;
    inline void reserve(int size);
    inline void squeeze();

// #ifndef QT_NO_CAST_FROM_BYTEARRAY
    inline operator const char *() const;
    inline operator const void *() const;
// #endif
    inline char *data();
    inline const char *data() const;
    inline const char *constData() const;
    inline void detach();
    inline bool isDetached() const;
    inline bool isSharedWith(const QByteArray &other);
    void clear();

    inline char at(int i) const;
    inline char operator[](int i) const;
    inline char operator[](uint i) const;
    inline QByteRef operator[](int i);
    inline QByteRef operator[](uint i);
    Q_REQUIRED_RESULT char front() const;
    Q_REQUIRED_RESULT inline QByteRef front();
    Q_REQUIRED_RESULT char back() const;
    Q_REQUIRED_RESULT inline QByteRef back();

    int indexOf(char c, int from = 0) const;
    int indexOf(const char *c, int from = 0) const;
    int indexOf(const QByteArray &a, int from = 0) const;
    int lastIndexOf(char c, int from = -1) const;
    int lastIndexOf(const char *c, int from = -1) const;
    int lastIndexOf(const QByteArray &a, int from = -1) const;

    inline bool contains(char c) const;
    inline bool contains(const char *a) const;
    inline bool contains(const QByteArray &a) const;
    int count(char c) const;
    int count(const char *a) const;
    int count(const QByteArray &a) const;

    inline int compare(const char *c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline int compare(const QByteArray &a, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    Q_REQUIRED_RESULT QByteArray left(int len) const;
    Q_REQUIRED_RESULT QByteArray right(int len) const;
    Q_REQUIRED_RESULT QByteArray mid(int index, int len = -1) const;
    Q_REQUIRED_RESULT QByteArray chopped(int len) const;

    bool startsWith(const QByteArray &a) const;
    bool startsWith(char c) const;
    bool startsWith(const char *c) const;

    bool endsWith(const QByteArray &a) const;
    bool endsWith(char c) const;
    bool endsWith(const char *c) const;

    bool isUpper() const;
    bool isLower() const;

    void truncate(int pos);
    void chop(int n);

    Q_REQUIRED_RESULT QByteArray toLower() const;
    Q_REQUIRED_RESULT QByteArray toUpper() const;
    Q_REQUIRED_RESULT QByteArray trimmed() const;
    Q_REQUIRED_RESULT QByteArray simplified() const;

    Q_REQUIRED_RESULT QByteArray leftJustified(int width, char fill = ' ', bool truncate = false) const;
    Q_REQUIRED_RESULT QByteArray rightJustified(int width, char fill = ' ', bool truncate = false) const;

    QByteArray &prepend(char c);
    inline QByteArray &prepend(int count, char c);
    QByteArray &prepend(const char *s);
    QByteArray &prepend(const char *s, int len);
    QByteArray &prepend(const QByteArray &a);
    QByteArray &append(char c);
    inline QByteArray &append(int count, char c);
    QByteArray &append(const char *s);
    QByteArray &append(const char *s, int len);
    QByteArray &append(const QByteArray &a);
    QByteArray &insert(int i, char c);
    QByteArray &insert(int i, int count, char c);
    QByteArray &insert(int i, const char *s);
    QByteArray &insert(int i, const char *s, int len);
    QByteArray &insert(int i, const QByteArray &a);
    QByteArray &remove(int index, int len);
    QByteArray &replace(int index, int len, const char *s);
    QByteArray &replace(int index, int len, const char *s, int alen);
    QByteArray &replace(int index, int len, const QByteArray &s);
    inline QByteArray &replace(char before, const char *after);
    QByteArray &replace(char before, const QByteArray &after);
    inline QByteArray &replace(const char *before, const char *after);
    QByteArray &replace(const char *before, int bsize, const char *after, int asize);
    QByteArray &replace(const QByteArray &before, const QByteArray &after);
    inline QByteArray &replace(const QByteArray &before, const char *after);
    QByteArray &replace(const char *before, const QByteArray &after);
    QByteArray &replace(char before, char after);
    inline QByteArray &operator+=(char c);
    inline QByteArray &operator+=(const char *s);
    inline QByteArray &operator+=(const QByteArray &a);

    QList<QByteArray> split(char sep) const;

    Q_REQUIRED_RESULT QByteArray repeated(int times) const;

// #ifndef QT_NO_CAST_TO_ASCII
    QT_ASCII_CAST_WARN QByteArray &append(const QString &s);
    QT_ASCII_CAST_WARN QByteArray &insert(int i, const QString &s);
    QT_ASCII_CAST_WARN QByteArray &replace(const QString &before, const char *after);
    QT_ASCII_CAST_WARN QByteArray &replace(char c, const QString &after);
    QT_ASCII_CAST_WARN QByteArray &replace(const QString &before, const QByteArray &after);

    QT_ASCII_CAST_WARN QByteArray &operator+=(const QString &s);
    QT_ASCII_CAST_WARN int indexOf(const QString &s, int from = 0) const;
    QT_ASCII_CAST_WARN int lastIndexOf(const QString &s, int from = -1) const;
// #endif
// #if !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
    inline QT_ASCII_CAST_WARN bool operator==(const QString &s2) const;
    inline QT_ASCII_CAST_WARN bool operator!=(const QString &s2) const;
    inline QT_ASCII_CAST_WARN bool operator<(const QString &s2) const;
    inline QT_ASCII_CAST_WARN bool operator>(const QString &s2) const;
    inline QT_ASCII_CAST_WARN bool operator<=(const QString &s2) const;
    inline QT_ASCII_CAST_WARN bool operator>=(const QString &s2) const;
// #endif

    short toShort(bool *ok = nullptr, int base = 10) const;
    ushort toUShort(bool *ok = nullptr, int base = 10) const;
    int toInt(bool *ok = nullptr, int base = 10) const;
    uint toUInt(bool *ok = nullptr, int base = 10) const;
    long toLong(bool *ok = nullptr, int base = 10) const;
    ulong toULong(bool *ok = nullptr, int base = 10) const;
    qlonglong toLongLong(bool *ok = nullptr, int base = 10) const;
    qulonglong toULongLong(bool *ok = nullptr, int base = 10) const;
    float toFloat(bool *ok = nullptr) const;
    double toDouble(bool *ok = nullptr) const;
    QByteArray toBase64(Base64Options options) const;
    QByteArray toBase64() const; // ### Qt6 merge with previous
    QByteArray toHex() const;
    QByteArray toHex(char separator) const; // ### Qt6 merge with previous
    QByteArray toPercentEncoding(const QByteArray &exclude = QByteArray(),
                                 const QByteArray &include = QByteArray(),
                                 char percent = '%') const;

    inline QByteArray &setNum(short, int base = 10);
    inline QByteArray &setNum(ushort, int base = 10);
    inline QByteArray &setNum(int, int base = 10);
    inline QByteArray &setNum(uint, int base = 10);
    QByteArray &setNum(qlonglong, int base = 10);
    QByteArray &setNum(qulonglong, int base = 10);
    inline QByteArray &setNum(float, char f = 'g', int prec = 6);
    QByteArray &setNum(double, char f = 'g', int prec = 6);
    QByteArray &setRawData(const char *a, uint n); // ### Qt 6: use an int

    Q_REQUIRED_RESULT static QByteArray number(int, int base = 10);
    Q_REQUIRED_RESULT static QByteArray number(uint, int base = 10);
    Q_REQUIRED_RESULT static QByteArray number(qlonglong, int base = 10);
    Q_REQUIRED_RESULT static QByteArray number(qulonglong, int base = 10);
    Q_REQUIRED_RESULT static QByteArray number(double, char f = 'g', int prec = 6);
    Q_REQUIRED_RESULT static QByteArray fromRawData(const char *, int size);
    Q_REQUIRED_RESULT static QByteArray fromBase64(const QByteArray &base64, Base64Options options);
    Q_REQUIRED_RESULT static QByteArray fromBase64(const QByteArray &base64); // ### Qt6 merge with previous
    Q_REQUIRED_RESULT static QByteArray fromHex(const QByteArray &hexEncoded);
    Q_REQUIRED_RESULT static QByteArray fromPercentEncoding(const QByteArray &pctEncoded, char percent = '%');

// #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
//     static QByteArray fromCFData(CFDataRef data);
//     static QByteArray fromRawCFData(CFDataRef data);
//     CFDataRef toCFData() const Q_DECL_CF_RETURNS_RETAINED;
//     CFDataRef toRawCFData() const Q_DECL_CF_RETURNS_RETAINED;
//     static QByteArray fromNSData(const NSData *data);
//     static QByteArray fromRawNSData(const NSData *data);
//     NSData *toNSData() const Q_DECL_NS_RETURNS_AUTORELEASED;
//     NSData *toRawNSData() const Q_DECL_NS_RETURNS_AUTORELEASED;
// #endif

//     typedef char *iterator;
//     typedef const char *const_iterator;
//     typedef iterator Iterator;
//     typedef const_iterator ConstIterator;
//     typedef std::reverse_iterator<iterator> reverse_iterator;
//     typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
//     inline iterator begin();
//     inline const_iterator begin() const;
//     inline const_iterator cbegin() const;
//     inline const_iterator constBegin() const;
//     inline iterator end();
//     inline const_iterator end() const;
//     inline const_iterator cend() const;
//     inline const_iterator constEnd() const;
//     reverse_iterator rbegin() { return reverse_iterator(end()); }
//     reverse_iterator rend() { return reverse_iterator(begin()); }
//     const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }
//     const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }
//     const_reverse_iterator crbegin() const { return const_reverse_iterator(end()); }
//     const_reverse_iterator crend() const { return const_reverse_iterator(begin()); }

//     // stl compatibility
//     typedef int size_type;
//     typedef qptrdiff difference_type;
//     typedef const char & const_reference;
//     typedef char & reference;
//     typedef char *pointer;
//     typedef const char *const_pointer;
//     typedef char value_type;
    inline void push_back(char c);
    inline void push_back(const char *c);
    inline void push_back(const QByteArray &a);
    inline void push_front(char c);
    inline void push_front(const char *c);
    inline void push_front(const QByteArray &a);
    void shrink_to_fit();

    static inline QByteArray fromStdString(const std::string &s);
    inline std::string toStdString() const;

    inline int count() const { return d->size; }
    int length() const { return d->size; }
    bool isNull() const;

    inline QByteArray(QByteArrayDataPtr dd);

// public:
//     typedef Data * DataPtr;
//     inline DataPtr &data_ptr() { return d; }
};

Q_DECLARE_OPERATORS_FOR_FLAGS(QByteArray::Base64Options)

class Q_CORE_EXPORT QByteRef {
public:
    inline operator char() const;
    inline QByteRef &operator=(char c);
    inline QByteRef &operator=(const QByteRef &c);
    inline bool operator==(char c) const;
    inline bool operator!=(char c) const;
    inline bool operator>(char c) const;
    inline bool operator>=(char c) const;
    inline bool operator<(char c) const;
    inline bool operator<=(char c) const;
};

// #ifndef QT_NO_COMPRESS
// Q_CORE_EXPORT QByteArray qCompress(const uchar* data, int nbytes, int compressionLevel = -1);
// Q_CORE_EXPORT QByteArray qUncompress(const uchar* data, int nbytes);
// inline QByteArray qCompress(const QByteArray& data, int compressionLevel = -1)
// { return qCompress(reinterpret_cast<const uchar *>(data.constData()), data.size(), compressionLevel); }
// inline QByteArray qUncompress(const QByteArray& data)
// { return qUncompress(reinterpret_cast<const uchar*>(data.constData()), data.size()); }
// #endif

Q_DECLARE_SHARED(QByteArray)

QT_END_NAMESPACE

#endif // QBYTEARRAY_H

/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Copyright (C) 2016 Intel Corporation.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or (at your option) the GNU General
** Public license version 3 or any later version approved by the KDE Free
** Qt Foundation. The licenses are as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-2.0.html and
** https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include <QtCore/qlist.lqt>

#ifndef QSTRINGLIST_H
#define QSTRINGLIST_H

#include <QtCore/qalgorithms.lqt>
#include <QtCore/qregexp.lqt>
#include <QtCore/qstring.lqt>
#include <QtCore/qstringmatcher.lqt>

QT_BEGIN_NAMESPACE

class QRegExp;
class QRegularExpression;

typedef QListIterator<QString> QStringListIterator;
typedef QMutableListIterator<QString> QMutableStringListIterator;

class QStringList;

// #ifdef Q_QDOC
// class QStringList : public QList<QString>
// #else
// template <> struct QListSpecialMethods<QString>
// #endif
// {
// #ifndef Q_QDOC
// protected:
//     ~QListSpecialMethods() {}
// #endif
// public:

// #ifndef Q_QDOC
// private:
//     inline QStringList *self();
//     inline const QStringList *self() const;
// };

// ### Qt6: check if there's a better way
class QStringList : public QList<QString>
{
// #endif
public:
    inline QStringList() Q_DECL_NOTHROW;
    inline explicit QStringList(const QString &i);
    inline QStringList(const QList<QString> &l);
// #ifdef Q_COMPILER_RVALUE_REFS
    inline QStringList(QList<QString> &l) Q_DECL_NOTHROW;
// #endif
// #ifdef Q_COMPILER_INITIALIZER_LISTS
//     inline QStringList(std::initializer_list<QString> args) : QList<QString>(args) { }
// #endif

    QStringList &operator=(const QList<QString> &other);
// #ifdef Q_COMPILER_RVALUE_REFS
    QStringList &operator=(QList<QString> &other) Q_DECL_NOTHROW;
// #endif

// #if QT_STRINGVIEW_LEVEL < 2
    inline bool contains(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
// #endif
    inline bool contains(QLatin1String str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline bool contains(QStringView str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    inline QStringList operator+(const QStringList &other) const;
    inline QStringList &operator<<(const QString &str);
    inline QStringList &operator<<(const QStringList &l);
    inline QStringList &operator<<(const QList<QString> &l);

// #ifndef QT_NO_REGEXP
    inline int indexOf(const QRegExp &rx, int from = 0) const;
    inline int lastIndexOf(const QRegExp &rx, int from = -1) const;
    inline int indexOf(QRegExp &rx, int from = 0) const;
    inline int lastIndexOf(QRegExp &rx, int from = -1) const;
// #endif

// #if QT_CONFIG(regularexpression)
    inline int indexOf(const QRegularExpression &re, int from = 0) const;
    inline int lastIndexOf(const QRegularExpression &re, int from = -1) const;
// #endif // QT_CONFIG(regularexpression)

    using QList<QString>::indexOf;
    using QList<QString>::lastIndexOf;

    ///
    // LQT:
    // from template <> struct QListSpecialMethods<QString>
    ///
    inline void sort(Qt::CaseSensitivity cs = Qt::CaseSensitive);
    inline int removeDuplicates();

    inline QString join(const QString &sep) const;
    inline QString join(QLatin1String sep) const;
    inline QString join(QChar sep) const;

    inline QStringList filter(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline QStringList &replaceInStrings(const QString &before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);

// #ifndef QT_NO_REGEXP
    inline QStringList filter(const QRegExp &rx) const;
    inline QStringList &replaceInStrings(const QRegExp &rx, const QString &after);
// #endif

// #if QT_CONFIG(regularexpression)
    inline QStringList filter(const QRegularExpression &re) const;
    inline QStringList &replaceInStrings(const QRegularExpression &re, const QString &after);
// #endif // QT_CONFIG(regularexpression)
};

Q_DECLARE_TYPEINFO(QStringList, Q_MOVABLE_TYPE);

QT_END_NAMESPACE

#endif // QSTRINGLIST_H
